<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java虚拟机Doc on JVM Doc</title>
    <link>http://jaswine.com/docs/jvm/</link>
    <description>Recent content in Java虚拟机Doc on JVM Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://jaswine.com/docs/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://jaswine.com/docs/jvm/docs/jmm/hb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jaswine.com/docs/jvm/docs/jmm/hb/</guid>
      <description> Happen-before模型 Java引入线程来利用现代多处理器的计算能力，但是同时也带来了线程安全的问题，Java内存模型(JMM)解决了线程之间操作可见性的问题。
happen-before原则  单线程happen-before原则：在同一个线程中，书写在前面的操作happen-before后面的操作。 锁的happen-before原则：同一个锁的unlock操作happen-before此锁的lock操作。 volatile的happen-before原则：对一个volatile变量的写操作happen-before对此变量的任意操作(当然也包括写操作了)。 happen-before的传递性原则：如果A操作 happen-before B操作，B操作happen-before C操作，那么A操作happen-before C操作。 线程启动的happen-before原则：同一个线程的start方法happen-before此线程的其它方法。 线程中断的happen-before原则：对线程interrupt方法的调用happen-before被中断线程的检测到中断发送的代码。 线程终结的happen-before原则：线程中的所有操作都happen-before线程的终止检测。 对象创建的happen-before原则：一个对象的初始化完成先于他的finalize方法调用。  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://jaswine.com/docs/jvm/docs/jmm/jmm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jaswine.com/docs/jvm/docs/jmm/jmm/</guid>
      <description> Java虚拟机内存模型  参考:  JVM运行时数据区域 - Java SE8规范   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://jaswine.com/docs/jvm/docs/tools/jconsole/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jaswine.com/docs/jvm/docs/tools/jconsole/</guid>
      <description> 使用JConsole查看JVM进程 Jconsole可以实时的查看JVM进程的内存，线程，类加载的情况，在调优和排错的情况下非常的好用。
1.连接 连接到JVM进程中，分为本地进程和远程连接。远程我们可以连接服务器上跑的程序。
 本地连接   远程连接  远程连接需要开启连接的端口，因为JConsole是通过jmx同JVM进程交互的，所以要开启，开启方法如下：
// 主机名(远程电脑的ip) -Djava.rmi.server.hostname=192.168.44.120 //监控的端口号 -Dcom.sun.management.jmxremote.port=1099 //关闭认证 -Dcom.sun.management.jmxremote.authenticate=false // 关闭SSL -Dcom.sun.management.jmxremote.ssl=false  2.查看 </description>
    </item>
    
  </channel>
</rss>